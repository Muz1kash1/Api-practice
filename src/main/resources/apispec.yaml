openapi: 3.0.3
info:
  title: OpenApiWeek-5 - OpenAPI 3.0
  description: "zatichka"
  version: "1.0"

servers:
  - url: https://http://localhost:8080/
tags:
  - name: openApiCrud
    description: CRUD API работы с заказами

  - name: order
    description: Access to orders

paths:
  /orders:
    get:
      tags:
        - order
      summary: Find all orders
      description: Returns all order
      operationId: getAllOrders
      parameters:
        - name: status
          in: query
          example: APPROVED
          description: status of order
          required: false
          schema:
            $ref: '#/components/schemas/Status'
        - name: startDateTime
          in: query
          description: Date of start
          required: false
          example: 2021-08-11T10:48:01.679Z
          schema:
            $ref: '#/components/schemas/Date'
        - name: endDateTime
          in: query
          description: Date of end
          required: false
          example: 2022-08-10T10:48:01.679Z
          schema:
            $ref: '#/components/schemas/Date'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDTO'


        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'


    post:
      tags:
        - order
      summary: Add a new order
      description: Add a new order
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderDTO'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - order
      summary: Upload order list from csv file
      description: Upload order list from csv file
      operationId: uploadOrderList
      requestBody:
        description: Put order list
        content:
          text/csv:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDTO'
        '405':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'




  /orders/{ProductId}:
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: ProductId
          in: path
          description: Id of order to replace
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ProductId'
      requestBody:
        description: Replace an existent order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'

        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '405':
          description: Validation exception
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: ProductId
          in: path
          description: ID of order to return
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ProductId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'
            text/csv:
              schema:
                { }

        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      tags:
        - order
      summary: Update a existing order
      description: Update an existing order by ID
      operationId: patchOrder
      parameters:
        - name: ProductId
          in: path
          example: 1
          description: ID of order to return
          required: true
          schema:
            $ref: '#/components/schemas/ProductId'
      requestBody:
        description: Update an existent order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderUpdateDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '405':
          description: Validation exception
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Illegal State
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'



    delete:
      tags:
        - order
      summary: Deletes a order
      description: delete a order
      operationId: deleteOrder
      parameters:
        - name: ProductId
          in: path
          example: 1
          description: order id to delete
          required: true
          schema:
            $ref: '#/components/schemas/ProductId'
      responses:
        '200':
          description: Sucess
        '400':
          description: Invalid order value
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'







components:
  schemas:
    OrderId:
      description: "string Id of order"
      type: string
      example: "KDSJFJ123"
    ProductId:
      description: "int id of order"
      type: integer
      format: int64
      example: 1
      minimum: 1
    Quantity:
      description: "quantity of something"
      minimum: 1
      maximum: 100
      type: integer
      format: int32
      example: 1
    Date:
      description: "order date"
      type: string
      format: date-time
      example: 2022-08-09T13:39:46.492Z
    Status:
      description: "order status"
      type: string
      example: placed
      enum:
        - PLACED
        - APPROVED
        - DELIVERED
    Complete:
      description: "if order completed"
      type: boolean
      example: true

    orderDTO:
      description: объект заказ, содержащий в себе все данные о заказе
      type: object
      required:
        - productId
        - quantity
      properties:
        id:
          $ref: '#/components/schemas/OrderId'
        productId:
          $ref: '#/components/schemas/ProductId'
        quantity:
          $ref: '#/components/schemas/Quantity'
        date:
          $ref: '#/components/schemas/Date'
        status:
          $ref: '#/components/schemas/Status'
        complete:
          $ref: '#/components/schemas/Complete'

    orderUpdateDTO:
      description: Order update response object
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/Quantity'
        status:
          $ref: '#/components/schemas/Status'
        complete:
          $ref: '#/components/schemas/Complete'
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A relative URI reference that uniquely identifies the problem type.
          default: 'about:blank'
          example: '/problem/internal-server-error'
        title:
          type: string
          description: title of the problem
          example: Internal server error
        status:
          type: integer
          format: int32
          description: The HTTP status of the problem.
          minimum: 100
          maximum: 599
          example: 404
        detail:
          type: string
          description: Detail of the problem
          example: Save data error






